name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn

    - name: Log in to Docker Hub
      run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Build Docker image
      run: |
        docker buildx build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/fastapi-crud:latest --push .

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Azure login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init

    - name: Check if Resource Group is Managed by Terraform
      id: rg-check
      run: |
        terraform state list azurerm_resource_group.aks || echo "Resource group not found in state"
      continue-on-error: true

    - name: Import Resource Group if Not Managed
      if: ${{ steps.rg-check.outputs.result == 'Resource group not found in state' }}
      run: |
        terraform import azurerm_resource_group.aks /subscriptions/3351389d-0046-4c6b-b23f-6b080c7a72ca/resourceGroups/az-rg-1

    - name: Check if AKS Cluster is Managed by Terraform
      id: aks-check
      run: |
        terraform state list azurerm_kubernetes_cluster.aks || echo "AKS cluster not found in state"
      continue-on-error: true

    - name: Import AKS Cluster if Not Managed
      if: ${{ steps.aks-check.outputs.result == 'AKS cluster not found in state' }}
      run: |
        terraform import azurerm_kubernetes_cluster.aks /subscriptions/3351389d-0046-4c6b-b23f-6b080c7a72ca/resourceGroups/az-rg-1/providers/Microsoft.ContainerService/managedClusters/newlook-cluster

    - name: Terraform Apply
      run: terraform apply -auto-approve

    - name: Configure kubectl
      run: |
        az aks get-credentials --resource-group az-rg-1 --name newlook-cluster

    - name: Verify kubectl Context
      run: kubectl config current-context

    - name: Get Services
      run: kubectl get svc

    - name: Deploy to AKS
      run: |
        kubectl apply -f k8s/deployment.yaml --validate=false
        kubectl apply -f k8s/service.yaml --validate=false

    - name: Wait for Load Balancer IP
      run: |
        echo "Waiting for external IP..."
        for _ in {1..30}; do
          EXTERNAL_IP=$(kubectl get svc fastapi-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ "$EXTERNAL_IP" != "" ]; then
            echo "External IP is $EXTERNAL_IP"
            echo "::set-output name=external_ip::$EXTERNAL_IP"
            break
          fi
          echo "Waiting for external IP..."
          sleep 10
        done
      id: get-external-ip

    - name: Output External IP
      run: echo "FastAPI is available at http://${{ steps.get-external-ip.outputs.external_ip }}"

    - name: Test the FastAPI Endpoints
      run: |
        EXTERNAL_IP=${{ steps.get-external-ip.outputs.external_ip }}
        curl -X POST http://$EXTERNAL_IP/items/ -H "Content-Type: application/json" -d '{"id": 1, "name": "Item 1", "price": 10.5}'
        curl http://$EXTERNAL_IP/items/
